---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: iot
data:
  iot-datasources.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus:9090
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-webconfig
  namespace: iot
data:
  grafana.ini: |
    [server]
    domain = localhost
    root_url = %(protocol)s://%(domain)s:%(http_port)s/dashboard/
    serve_from_sub_path = true
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: grafana-ingress-middleware
  namespace: iot
spec:
  replacePathRegex:
    regex: ^/dashboard/(.*)
    replacement: /$1
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: grafana-ingress
  namespace: iot
  annotations:
    kubernetes.io/ingress.class: traefik
    traefik.ingress.kubernetes.io/router.middlewares: iot-grafana-ingress-middleware@kubernetescrd
spec:
  rules:
    - http:
        paths:
          - path: /dashboard
            pathType: Prefix
            backend:
              service:
                name: grafana
                port:
                  number: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: iot
spec:
  type: LoadBalancer
  ports:
    - port: 3000
      protocol: TCP
      targetPort: http-grafana
      nodePort: 31998
  selector:
    app: grafana
  sessionAffinity: None
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: grafana
  name: grafana
  namespace: iot
spec:
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      securityContext:
        fsGroup: 472
        supplementalGroups:
          - 0
      containers:
        - name: grafana-container
          image: grafana/grafana:9.2.4
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3000
              name: http-grafana
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /robots.txt
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 2
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 3000
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 250m
              memory: 750Mi
          volumeMounts:
            - mountPath: /var/lib/grafana
              name: grafana-pv
            - mountPath: /etc/grafana
              name: grafana-webconfig
            - mountPath: /etc/grafana/provisioning/datasources
              name: grafana-datasources
      volumes:
        - name: grafana-pv
          persistentVolumeClaim:
            claimName: grafana-pvc
        - name: grafana-webconfig
          configMap:
            name: grafana-webconfig
        - name: grafana-datasources
          configMap:
            name: grafana-datasources
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: iot
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

